bindings:
  - path: ./config
  - name: handleRtTfSingleEventError
    path: ../../../../v0/util/index
  - path: ./utils
steps:
  - name: validateInput
    template: |
      console.log('router input: ', ^)
      $.assert(Array.isArray(^) && ^.length > 0, "Invalid event array")

  - name: transform
    externalWorkflow:
      path: ./procWorkflow.yaml
    loopOverInput: true

  - name: successfulEvents
    template: |
      $.outputs.transform#idx.output.({
        "output": .body.JSON.events[0],
        "destination": ^[idx].destination,
        "metadata": ^[idx].metadata
      })[]
  - name: failedEvents
    template: |
      $.outputs.transform#idx.error.(
        $.handleRtTfSingleEventError(^[idx], .originalError ?? ., {})
      )[]
  - name: batchSuccessfulEvents
    description: Batches the successfulEvents
    template: |
      console.log('successBatch: ', $.outputs.successfulEvents)
      let batches = $.chunk($.outputs.successfulEvents, $.MAX_BATCH_SIZE);
      batches@batch.({
        "batchedRequest": {
          "body": {
            "JSON": {"events": ~r batch.output[]},
            "JSON_ARRAY": {},
            "XML": {},
            "FORM": {}
          },
          "version": "1",
          "type": "REST",
          "method": "POST",
          "endpoint": $.getEndpoint(batch[0].destination.Config),
          "headers": {
            "Content-Type": "application/json"
          },
          "params": {},
          "files": {}
        },
        "metadata": ~r batch.metadata[],
        "batched": true,
        "statusCode": 200,
        "destination": batch[0].destination
      })[];
  - name: finalPayload
    template: |
      [...$.outputs.failedEvents, ...$.outputs.batchSuccessfulEvents]
