bindings:
  - name: EventType
    path: ../../../../constants
  - path: ./utils
    exportAll: true
  - path: ../../bindings/jsontemplate
    exportAll: true
  - name: defaultRequestConfig
    path: ../../../../v0/util
  - name: removeUndefinedAndNullValues
    path: ../../../../v0/util
  - name: getFieldValueFromMessage
    path: ../../../../v0/util
  - name: isDefinedAndNotNull
    path: ../../../../v0/util
  - name: addExternalIdToTraits
    path: ../../../../v0/util

steps:
  - name: checkIfProcessed
    condition: .message.statusCode
    template: |
      $.batchMode ? .message.body.JSON : .message;
    onComplete: return

  - name: messageType
    template: |
      .message.type.toLowerCase();

  - name: validateInput
    template: |
      let messageType = $.outputs.messageType;
      $.assert(messageType, "message Type is not present. Aborting");
      $.assert(messageType in {{$.EventType.([.IDENTIFY, .TRACK, .GROUP])}}, "message type " + messageType + " is not supported");
      $.assertConfig(.destination.Config.apiKey, "Access Token is not present. Aborting");

  - name: apiVersion
    template: |
      const version = $.isDefinedAndNotNull(.destination.Config.apiVersion) ? .destination.Config.apiVersion : "v2";
      version;

  - name: rETLPayload
    condition: .message.context.mappedToDestination === true
    template: |
      $.addExternalIdToTraits(.message);
      $.context.payload = $.getFieldValueFromMessage(.message, "traits")
  
  - name: trackWorkflow
    condition: $.outputs.messageType === {{$.EventType.TRACK}}
    steps: 
      - name: streamingPayload
        condition: "!outputs.rETLPayload"
        template: |
          const timestamp = .message.().(
                {{{{$.getGenericPaths("timestamp")}}}};
              );
          const payload = .message.({
                event_name: .event,
                user_id: {{{{$.getGenericPaths("userIdOnly")}}}},
                email: {{{{$.getGenericPaths("email")}}}},
                metadata: .properties
              });
          $.outputs.apiVersion !== "v1" ? payload.id = .message.properties.id || .message.traits.id;
          $.outputs.apiVersion !== "v1" ? payload.created_at = $.toSeconds(timestamp);
          $.outputs.apiVersion === "v1" ? payload.created = $.toSeconds(timestamp);
          !(payload.user_id) && .destination.Config.sendAnonymousId ? payload.user_id = .message.anonymousId;
          $.context.payload = payload;
      - name: finalPayload
        template: |
          $.context.payload = $.addMetadataToPayload($.context.payload);
          $.assert($.context.payload.event_name, "Event name is required for track call");
          $.assert($.context.payload.user_id || $.context.payload.email, "Either email or userId is required for Track call");
          $.context.requestMethod = 'POST';
          $.context.endpoint =  $.getBaseEndpoint(.destination) + "/" + "events";
          $.context.payload = $.removeUndefinedAndNullValues($.context.payload);

  - name: groupTransformPayload
    condition: $.outputs.messageType === {{$.EventType.GROUP}} && !$.outputs.rETLPayload
    template: |
      const payload = .message.({
            company_id:  {{{{$.getGenericPaths("groupId")}}}},
            name: {{{{$.getGenericPaths("name")}}}},
            website: {{{{$.getGenericPaths("website")}}}},
            plan: .traits.plan || .context.traits.plan,
            size: Number(.traits.size || .context.traits.size),
            industry: .traits.industry || .context.traits.industry,
            monthly_spend: .traits.monthlySpend || .context.traits.monthlySpend ? Number(.traits.monthlySpend || .context.traits.monthlySpend) : undefined,
            remote_created_at: .traits.remoteCreatedAt || .context.traits.remoteCreatedAt ? Number(.traits.remoteCreatedAt || .context.traits.remoteCreatedAt) : undefined
          });
      payload;
          
  - name: versionWorkflows
    condition: $.outputs.messageType !== $.EventType.TRACK
    steps: 
      - name: v1
        condition: $.outputs.apiVersion === "v1"
        externalWorkflow:
          path: ./v1Workflow.yaml
          bindings:
            - name: rETLPayload
              value: $.outputs.rETLPayload
            - name: groupTransformPayload
              value: $.outputs.rETLPayload || $.outputs.groupTransformPayload
      - name: v2
        condition: $.outputs.apiVersion === "v2"
        externalWorkflow:
          path: ./v2Workflow.yaml
          bindings:
            - name: rETLPayload
              value: $.outputs.rETLPayload
            - name: groupTransformPayload
              value: $.outputs.rETLPayload || $.outputs.groupTransformPayload
      - name: finalPayload
        template: |
          const finalOutput = $.outputs.versionWorkflows.v1 ?? $.outputs.versionWorkflows.v2
          $.context.requestMethod = finalOutput.requestMethod;
          $.context.payload = finalOutput.payload;
          $.context.endpoint = finalOutput.endpoint;

  - name: buildResponseForProcessTransformation
    description: Build response for multiple transformed event
    condition: $.context.response && $.context.response.length > 0
    template: |
      $.context.response;
    else:
      name: buildResponseForSingleProcessTransformation
      description: Build response for single transformed event
      template: |
        const response = $.defaultRequestConfig();
        response.body.JSON = $.context.payload;
        response.endpoint = $.context.endpoint;
        response.method = $.context.requestMethod;
        response.headers = $.getHeaders(.destination, $.outputs.apiVersion);
        $.outputs.apiVersion === "v1" && $.outputs.messageType !== {{$.EventType.GROUP}} ? response.userId = .message.anonymousId;
        response;